window.Telegram.WebApp.expand();
// –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É —Å —è—á–µ–π–∫–∞–º–∏
const grid = document.querySelector('.grid');
for (let i = 0; i < 25; i++) {
    const cell = document.createElement('div');
    cell.classList.add('cell');
    grid.appendChild(cell);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const numCellsInput = document.getElementById('num-cells');
const highlightButton = document.getElementById('highlight-btn');
const modal = document.getElementById('modal');
const closeModal = document.querySelector('.close');
const numButtons = document.querySelectorAll('.num-button');

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
numCellsInput.addEventListener('click', () => {
    modal.style.display = 'block';
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫
closeModal.addEventListener('click', () => {
    modal.style.display = 'none';
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –∑–∞ –µ–≥–æ –ø—Ä–µ–¥–µ–ª–∞–º–∏
window.addEventListener('click', (event) => {
    if (event.target == modal) {
        modal.style.display = 'none';
    }
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
numButtons.forEach(button => {
    button.addEventListener('click', (event) => {
        const value = event.target.getAttribute('data-value');
        numCellsInput.value = value;
        modal.style.display = 'none'; // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    });
});

// –¢–∞–±–ª–∏—Ü–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —è—á–µ–µ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–º–±
const safeCellsMapping = {
    1: 14, 2: 9, 3: 7, 4: 6, 5: 5, 6: 5, 7: 4, 8: 3,
    9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 1, 16: 1,
    17: 1, 18: 1, 19: 1, 20: 1, 21: 1, 22: 1, 23: 1, 24: 1
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —è—á–µ–µ–∫
function openSafeCells() {
    const bombs = parseInt(numCellsInput.value);
    const optimalSafeCells = safeCellsMapping[bombs];

    if (!optimalSafeCells) {
        alert('Please select a valid number of bombs.');
        return;
    }

    // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    document.querySelectorAll('.cell').forEach(cell => cell.classList.remove('active'));

    // –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —è—á–µ–µ–∫
    const cells = Array.from(document.querySelectorAll('.cell'));
    const selectedIndices = [];

    while (selectedIndices.length < optimalSafeCells) {
        const randomIndex = Math.floor(Math.random() * cells.length);
        if (!selectedIndices.includes(randomIndex)) {
            selectedIndices.push(randomIndex);
        }
    }

    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏
    selectedIndices.forEach(index => cells[index].classList.add('active'));
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É
highlightButton.addEventListener('click', openSafeCells);
document.addEventListener('DOMContentLoaded', () => {
    // Variables for the seed modal
    const seedModal = document.getElementById('seed-modal');
    const closeSeedModal = document.querySelector('.close-seed');
    const submitSeedButton = document.getElementById('submit-seed-btn');
    const highlightButton = document.getElementById('highlight-btn');

    // Check if server seed was entered before
    if (!localStorage.getItem('serverSeed')) {
        // Show seed modal on first click of the "Get a signal üöÄ" button
        highlightButton.addEventListener('click', function askForSeed() {
            seedModal.style.display = 'block';
            // Remove the listener after first trigger
            highlightButton.removeEventListener('click', askForSeed);
        });
    }

    // Handle the seed submission
    submitSeedButton.addEventListener('click', () => {
        const serverSeed = document.getElementById('server-seed-input').value;
        if (serverSeed.trim()) {
            // Save the seed in localStorage
            localStorage.setItem('serverSeed', serverSeed);
            seedModal.style.display = 'none';
        }
    });

    // Close the seed modal when the close button is clicked
    closeSeedModal.addEventListener('click', () => {
        seedModal.style.display = 'none';
    });

    // Close the seed modal when clicking outside of the modal content
    window.addEventListener('click', (event) => {
        if (event.target === seedModal) {
            seedModal.style.display = 'none';
        }
    });
});

document.addEventListener('DOMContentLoaded', () => {
    // Variables for the seed modal and loading message
    const seedModal = document.getElementById('seed-modal');
    const closeSeedModal = document.querySelector('.close-seed');
    const submitSeedButton = document.getElementById('submit-seed-btn');
    const highlightButton = document.getElementById('highlight-btn');
    const loadingMessage = document.getElementById('loading-message');

    // Show seed modal on every page load
    seedModal.style.display = 'block';

    // Handle the seed submission
    submitSeedButton.addEventListener('click', () => {
        const serverSeed = document.getElementById('server-seed-input').value;
        if (serverSeed.trim()) {
            // Show loading message
            loadingMessage.style.display = 'block';

            // Simulate loading delay
            setTimeout(() => {
                // Hide the loading message
                loadingMessage.style.display = 'none';

                // Save the seed in localStorage
                localStorage.setItem('serverSeed', serverSeed);
                
                // Hide the modal
                seedModal.style.display = 'none';
            }, 1000); // Simulate 1 second loading
        }
    });

    // Close the seed modal when the close button is clicked
    closeSeedModal.addEventListener('click', () => {
        seedModal.style.display = 'none';
    });

    // Close the seed modal when clicking outside of the modal content
    window.addEventListener('click', (event) => {
        if (event.target === seedModal) {
            seedModal.style.display = 'none';
        }
    });
});


highlightButton.addEventListener('click', function(){
    const url = new URL(window.location.href);
    if (!url.searchParams.has('cooldown')) {
        var btn = $(this);
        btn.prop('disabled', true);
        setTimeout(function(){
          btn.prop('disabled', false);
        },5000);
    }
  });